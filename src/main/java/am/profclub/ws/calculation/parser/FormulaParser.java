/* Generated By:JavaCC: Do not edit this line. FormulaParser.java */
package am.profclub.ws.calculation.parser;

import java.util.*;

/**
 * A parser to convert an AtTask custom formula into a JEXL expression for evaluation.
 */
public class FormulaParser implements FormulaParserConstants {
        // This holds the final output string after parsing.
        private StringBuilder output = null;

        // A resolver that is used to replace references to fields, wildcards, and functions.
        private FormulaResolver resolver = null;

        public void setResolver(FormulaResolver resolver) {
                this.resolver = resolver;
        }

        public FormulaResolver getResolver() {
                return resolver;
        }

        private String resolveField(String objectName, String fieldName) throws ParseException {
                if (resolver == null) throw new ParseException("Encountered field without a valid formula resolver.");
                return resolver.resolveField(objectName, fieldName);
        }

  final public String parseFormula() throws ParseException {
  output = new StringBuilder();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_PAREN:
    case MINUS:
    case NOT:
    case BIT_NOT:
    case BOOLEAN_LITERAL:
    case INTEGER_LITERAL:
    case FLOAT_LITERAL:
    case STRING_LITERAL:
    case NULL:
    case IDENTIFIER:
    case DE_FIELD:
    case FIELD:
    case DATEWILDCARD:
    case WILDCARD:
      Expression();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(0);
    return output.toString();
  }

  final private void Expression() throws ParseException {
    UnaryExpression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case MODULUS:
      case AND:
      case OR:
      case BIT_AND:
      case BIT_OR:
      case BIT_XOR:
      case EQUAL:
      case NOT_EQUAL:
      case LESS_THAN:
      case GREATER_THAN:
      case LESS_EQUAL:
      case GREATER_EQUAL:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      BinaryOperator();
      UnaryExpression();
    }
  }

  final private void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NOT:
    case BIT_NOT:
      UnaryOperator();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    PrimaryExpression();
  }

  final private void PrimaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FIELD:
      Field(null);
      break;
    case DE_FIELD:
      DEField(null);
      break;
    case DATEWILDCARD:
    case WILDCARD:
      WildCard();
      break;
    case IDENTIFIER:
      FunctionCall();
      break;
    case BOOLEAN_LITERAL:
    case INTEGER_LITERAL:
    case FLOAT_LITERAL:
    case STRING_LITERAL:
    case NULL:
      Literal();
      break;
    case OPEN_PAREN:
      jj_consume_token(OPEN_PAREN);
                          output.append(token);
      Expression();
      jj_consume_token(CLOSE_PAREN);
                          output.append(token);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private void Field(String objectName) throws ParseException {
  StringBuilder fieldName = new StringBuilder();
    jj_consume_token(FIELD);
          fieldName.append(token.toString());
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIELD:
        jj_consume_token(FIELD);
        break;
      case DE_FIELD:
        jj_consume_token(DE_FIELD);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  fieldName.append('.').append(token.toString());
    }
          output.append(resolveField(objectName, fieldName.toString()));
  }

  final private void DEField(String objectName) throws ParseException {
    jj_consume_token(DE_FIELD);
          output.append(resolveField(objectName, token.toString()));
  }

  final private void WildCard() throws ParseException {
  String wildcard; boolean field = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATEWILDCARD:
      jj_consume_token(DATEWILDCARD);
      break;
    case WILDCARD:
      jj_consume_token(WILDCARD);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          wildcard = token.toString();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
                  field = true;
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIELD:
        Field(wildcard);
        break;
      case DE_FIELD:
        DEField(wildcard);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
                if (!field) {
                        if (resolver == null) { throw new ParseException("Encountered wildcard without a valid formula resolver."); }
                        output.append(resolver.resolveWildcard(wildcard));
                }
  }

  final private void FunctionCall() throws ParseException {
  String functionName; List<String> parameters;
          if (resolver == null) { throw new ParseException("Encountered function call without a valid formula resolver."); }
    jj_consume_token(IDENTIFIER);
          functionName = token.toString();
    parameters = Parameters();
          output.append(resolver.resolveFunctionCall(functionName, parameters));
  }

  final private List<String> Parameters() throws ParseException {
        List<String> result = new ArrayList<String>();
        StringBuilder main;
                // Replace the main output stream with a temporary one.  We want to capture parameter strings, but
                // it will be the formula resolver's job to actually output them as a valid JEXL expression.
                main = output;
    jj_consume_token(OPEN_PAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_PAREN:
    case MINUS:
    case NOT:
    case BIT_NOT:
    case BOOLEAN_LITERAL:
    case INTEGER_LITERAL:
    case FLOAT_LITERAL:
    case STRING_LITERAL:
    case NULL:
    case IDENTIFIER:
    case DE_FIELD:
    case FIELD:
    case DATEWILDCARD:
    case WILDCARD:
                  output = new StringBuilder();
      Parameter();
                  result.add(output.toString());
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
                          output = new StringBuilder();
        Parameter();
                          result.add(output.toString());
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(CLOSE_PAREN);
	// Restore the main output stream.
	output = main;
	return result;
  }

  final private void Parameter() throws ParseException {
    Expression();
  }

  final private void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN_LITERAL:
      jj_consume_token(BOOLEAN_LITERAL);
      break;
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case FLOAT_LITERAL:
      jj_consume_token(FLOAT_LITERAL);
                        // JEXL doesn't accept floating point literals without a leading zero.
                        if (token.image.startsWith(".")) output.append("0");
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    case NULL:
      jj_consume_token(NULL);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          output.append(token);
  }

  final private void BinaryOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
      break;
    case MODULUS:
      jj_consume_token(MODULUS);
      break;
    case AND:
      jj_consume_token(AND);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    case BIT_AND:
      jj_consume_token(BIT_AND);
      break;
    case BIT_OR:
      jj_consume_token(BIT_OR);
      break;
    case BIT_XOR:
      jj_consume_token(BIT_XOR);
      break;
    case NOT_EQUAL:
      jj_consume_token(NOT_EQUAL);
      break;
    case LESS_THAN:
      jj_consume_token(LESS_THAN);
      break;
    case GREATER_THAN:
      jj_consume_token(GREATER_THAN);
      break;
    case LESS_EQUAL:
      jj_consume_token(LESS_EQUAL);
      break;
    case GREATER_EQUAL:
      jj_consume_token(GREATER_EQUAL);
      break;
    case EQUAL:
      jj_consume_token(EQUAL);
                        // JEXL doesn't support '=' for equality, so convert it to '=='
                        if (token.image.equals("=")) token.image = "==";
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          output.append(" ").append(token).append(" ");
  }

  final private void UnaryOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case NOT:
      jj_consume_token(NOT);
      break;
    case BIT_NOT:
      jj_consume_token(BIT_NOT);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          output.append(" ").append(token);
  }

  /** Generated Token Manager. */
  public FormulaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xf0220840,0xfddfc00,0x220800,0xf0000040,0x200,0x0,0x0,0x0,0x200,0x100,0xf0220840,0xf0000000,0xfddfc00,0x220800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x3f,0x0,0x0,0x3f,0x0,0xc,0x30,0xc,0x0,0x0,0x3f,0x1,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public FormulaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FormulaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FormulaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public FormulaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FormulaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public FormulaParser(FormulaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FormulaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private List jj_expentries = new ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[38];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}

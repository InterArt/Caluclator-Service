/* Generated By:JavaCC: Do not edit this line. FormulaFinder.java */
package am.profclub.ws.calculation.parser;

import java.util.*;

/**
 * A parser to evaluate and resolve formulas in an arbitrary string.
 */
public class FormulaFinder implements FormulaFinderConstants {
        // This holds the final output string after parsing.
        private StringBuilder output = null;

        // A resolver that is used to replace references to fields, wildcards, and functions.
        private FormulaProcessor processor = null;

        public void setProcessor(FormulaProcessor processor) {
                this.processor = processor;
        }

        public FormulaProcessor getProcessor() {
                return processor;
        }

  final public String search() throws ParseException {
  output = new StringBuilder();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
    case FORMULA_START:
    case OPEN_BRACE:
    case CLOSE_BRACE:
    case QUOTE:
    case SINGLE_QUOTE:
      Text();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(0);
    return output.toString();
  }

  final private void Text() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FORMULA_START:
        Formula();
        break;
      case TEXT:
      case OPEN_BRACE:
      case CLOSE_BRACE:
      case QUOTE:
      case SINGLE_QUOTE:
        NotFormula();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEXT:
      case FORMULA_START:
      case OPEN_BRACE:
      case CLOSE_BRACE:
      case QUOTE:
      case SINGLE_QUOTE:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
  }

  final private void NotFormula() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      jj_consume_token(TEXT);
      break;
    case OPEN_BRACE:
      jj_consume_token(OPEN_BRACE);
      break;
    case CLOSE_BRACE:
      jj_consume_token(CLOSE_BRACE);
      break;
    case QUOTE:
      jj_consume_token(QUOTE);
      break;
    case SINGLE_QUOTE:
      jj_consume_token(SINGLE_QUOTE);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          output.append(token);
  }

  final private void Formula() throws ParseException {
    jj_consume_token(FORMULA_START);
    ProcessFormula();
  }

  private void ProcessFormula() throws ParseException, ParseException {
        StringBuilder formula = new StringBuilder();

        Token next;
        Token quote = null;
        int nesting = 1;

        while (true) {
                next = getToken(1);
                if (next.kind == EOF) {
                        throw new ParseException("Unclosed formula");
                } else if (quote != null && next.kind == quote.kind) {
                        // exiting a quoted string
                        quote = null;
                } else if (quote == null && (next.kind == QUOTE || next.kind == SINGLE_QUOTE)) {
                        // entering a quoted string
                        quote = next;
                } else if (quote == null) {
                        if (next.kind == OPEN_BRACE) {
                                nesting++;
                        } else if (next.kind == CLOSE_BRACE) {
                                nesting--;
                                if (nesting == 0) {
                                        getNextToken();
                                        break;
                                }
                        }
                }

                formula.append(next);
                getNextToken();
        }

        if (processor == null) throw new ParseException("Encountered formula with no processor.");
        output.append(processor.processFormula(formula.toString()));
  }

  public FormulaFinderTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x7e,0x7e,0x7e,0x7a,};
   }

  public FormulaFinder(java.io.InputStream stream) {
     this(stream, null);
  }
  public FormulaFinder(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FormulaFinderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  public FormulaFinder(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FormulaFinderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  public FormulaFinder(FormulaFinderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  public void ReInit(FormulaFinderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private Vector jj_expentries = new Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[7];
    for (int i = 0; i < 7; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 7; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
